import os
import sys
from pathlib import Path

# Setup paths
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import (
    load_config,
    setup_logging,
    get_tableau_server_and_auth,
    ensure_directory_exists
)
from base_setup.utils.email_utils import send_email

# Logging
logger = setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))


def send_view_download_error_email(site_id: str, view_name: str, download_type: str, error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"ðŸš¨ View Download Failed - {view_name} ({download_type})"

    body = f"""
    <html>
    <head>
        <style>
            body {{ font-family: Arial, sans-serif; }}
            .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
            .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
            code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
        </style>
    </head>
    <body>
        <p class="header">Feature: <strong>tab-view-download-01</strong> â€“ View Asset Export</p>

        <p><strong>Tableau Site:</strong> {site_id}</p>
        <p><strong>View:</strong> {view_name}</p>
        <p><strong>Download Type:</strong> {download_type}</p>
        <p><strong>Error:</strong><br><code>{error_message}</code></p>

        <p class="footer"><i>This alert was auto-generated by the view asset download script.</i></p>
    </body>
    </html>
    """
    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Failed to send email alert: {email_error}")


def download_view_asset(view_name: str, download_type: str = "image") -> dict:
    """
    Download Tableau view as image/pdf/csv.
    """
    try:
        config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
        server, auth = get_tableau_server_and_auth(config)
        download_dir = config.get("tableau", {}).get("download_path", "downloads")
        ensure_directory_exists(download_dir)

        with server.auth.sign_in(auth):
            logger.info("Signed into Tableau Server")
            site_id = server.site_id

            all_views, _ = server.views.get()
            view = next((v for v in all_views if v.name.strip().lower() == view_name.strip().lower()), None)

            if not view:

                msg = f"View '{view_name}' not found."
                logger.error(msg)
                send_view_download_error_email(site_id, view_name, download_type, msg)
                return {"success": False, "message": msg}

            try:
                if download_type == "pdf":
                    server.views.populate_pdf(view)
                    content = view.pdf
                    ext = "pdf"
                elif download_type == "image":
                    server.views.populate_image(view)
                    content = view.image
                    ext = "png"
                elif download_type == "csv":
                    server.views.populate_csv(view)
                    content = b''.join(view.csv)
                    ext = "csv"
                else:
                    msg = f"Invalid download type '{download_type}'"
                    logger.error(msg)
                    send_view_download_error_email(site_id, view_name, download_type, msg)
                    return {"success": False, "message": msg}
            except Exception as e:
                logger.error(f"Failed to populate {download_type}: {e}")
                send_view_download_error_email(site_id, view_name, download_type, str(e))
                return {"success": False, "message": f"Populate error: {e}"}

            filename = f"{view.name.replace(' ', '_')}.{ext}"
            full_path = os.path.join(download_dir, filename)

            try:
                with open(full_path, "wb") as f:
                    f.write(content)
            except Exception as e:
                logger.error(f"File write failed: {e}")
                send_view_download_error_email(site_id, view_name, download_type, str(e))
                return {"success": False, "message": f"Write error: {e}"}

            logger.info(f"{download_type.upper()} for view '{view.name}' saved to {full_path}")
            return {"success": True, "message": f"{download_type.capitalize()} downloaded", "path": full_path}

    except Exception as e:
        logger.error(f"Top-level failure: {e}", exc_info=True)
        send_view_download_error_email("Unknown", view_name, download_type, str(e))
        return {"success": False, "message": f"Unexpected error: {e}"}


if __name__ == "__main__":
    view_name = "Product"  # Change this to your actual view name

    print(download_view_asset(view_name, download_type="image"))
    print(download_view_asset(view_name, download_type="pdf"))
    print(download_view_asset(view_name, download_type="csv"))