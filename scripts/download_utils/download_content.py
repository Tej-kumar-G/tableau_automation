import os
import sys
from pathlib import Path
from typing import Dict, Optional

# Add base_setup to path
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import (
    load_config,
    setup_logging,
    get_tableau_server_and_auth,
    ensure_directory_exists
)
from base_setup.utils.email_utils import send_email

# Logging
logger = setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))



def send_download_failure_email(site_id: str, content_type: str, content_name: str, project_name: Optional[str], error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"ðŸš¨ Download Failed - {content_type.title()} '{content_name}'"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>tab-content-download-01</strong> â€“ Download Workbook or Datasource</p>

      <p><strong>Site ID:</strong> {site_id}</p>
      <p><strong>Content Type:</strong> {content_type}</p>
      <p><strong>Content Name:</strong> {content_name}</p>
      {f"<p><strong>Project Filter:</strong> {project_name}</p>" if project_name else ""}
      <p><strong>Error:</strong><br><code>{error_message}</code></p>

      <p class="footer"><i>This alert was auto-generated by the content download script.</i></p>
    </body>
    </html>
    """
    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Failed to send email alert: {email_error}")


def download_content(content_type: str, content_name: str, project_name: Optional[str] = None) -> Dict[str, object]:
    """
    Download a workbook (.twbx) or datasource (.tdsx) from Tableau Server.
    """
    try:
        content_type = content_type.lower()
        if content_type not in ["workbook", "datasource"]:
            return {"success": False, "message": f"Invalid content type: {content_type}"}

        config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
        server, auth = get_tableau_server_and_auth(config)
        download_dir = config.get("tableau", {}).get("download_path", "downloads")
        ensure_directory_exists(download_dir)

        with server.auth.sign_in(auth):
            site_id = server.site_id
            logger.info(f"Authenticated to Tableau site: {site_id}")

            if content_type == "workbook":
                items, _ = server.workbooks.get()
                extension = "twbx"
            else:
                items, _ = server.datasources.get()
                extension = "tdsx"

            filtered = [item for item in items if item.name.strip().lower() == content_name.strip().lower()]

            if project_name:
                projects, _ = server.projects.get()
                project = next((p for p in projects if p.name.strip().lower() == project_name.strip().lower()), None)
                if not project:
                    msg = f"Project '{project_name}' not found."
                    logger.error(msg)
                    send_download_failure_email(site_id, content_type, content_name, project_name, msg)
                    return {"success": False, "message": msg}
                filtered = [item for item in filtered if item.project_id == project.id]

            if not filtered:
                msg = f"{content_type.title()} '{content_name}' not found."
                logger.error(msg)
                send_download_failure_email(site_id, content_type, content_name, project_name, msg)
                return {"success": False, "message": msg}

            if len(filtered) > 1:
                msg = f"Multiple {content_type}s named '{content_name}' found. Please specify a project."
                logger.warning(msg)
                send_download_failure_email(site_id, content_type, content_name, project_name, msg)
                return {"success": False, "message": msg}

            item = filtered[0]

            # Download logic
            try:
                if content_type == "workbook":
                    downloaded_path = server.workbooks.download(item.id, filepath=download_dir, include_extract=False)
                else:
                    downloaded_path = server.datasources.download(item.id, filepath=download_dir)
            except Exception as download_err:
                msg = f"Download failed: {download_err}"
                logger.error(msg)
                send_download_failure_email(site_id, content_type, content_name, project_name, msg)
                return {"success": False, "message": msg}

            final_path = os.path.join(download_dir, f"{content_name.replace(' ', '_')}.{extension}")
            if downloaded_path != final_path:
                os.rename(downloaded_path, final_path)

            logger.info(f"{content_type.title()} '{content_name}' downloaded to {final_path}")
            return {
                "success": True,
                "message": f"Downloaded {content_type} '{content_name}' successfully.",
                "download_path": final_path
            }

    except Exception as e:
        logger.error(f"Error downloading {content_type}: {e}", exc_info=True)
        send_download_failure_email(site_id, content_type, content_name, project_name, str(e))
        return {"success": False, "message": f"Error downloading content: {e}"}