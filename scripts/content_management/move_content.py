import sys
import os
import logging
from pathlib import Path
from typing import Dict, Optional, Union
import tableauserverclient as TSC

# Setup base path and logging
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, setup_logging, get_tableau_server_and_auth
from base_setup.utils.email_utils import send_email

logger = setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))


def send_move_error_email(content_type, content_name, source_project, new_project, error_message):
    config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
    site_id = config.get("tableau", {}).get("site_id", "Unknown Site")

    subject = f"🚨 Move Failed - {content_type.title()} '{content_name}'"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>move-content</strong></p>

      <p><strong>Site:</strong> {site_id}</p>
      <p><strong>Content Type:</strong> {content_type}</p>
      <p><strong>Content Name:</strong> {content_name}</p>
      <p><strong>From Project:</strong> {source_project}</p>
      <p><strong>To Project:</strong> {new_project}</p>
      <p><strong>Error Message:</strong><br><code>{error_message}</code></p>

      <p class="footer"><i>This alert was auto-generated by the Tableau move script.</i></p>
    </body>
    </html>
    """

    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"❌ Failed to send move error email: {email_error}")


def find_project(server: TSC.Server, project_name: str) -> Optional[TSC.ProjectItem]:
    try:
        all_projects, _ = server.projects.get()
        name = project_name.strip().lower()
        return next((p for p in all_projects if p.name.strip().lower() == name), None)
    except Exception as e:
        logger.error(f"Error finding project '{project_name}': {e}", exc_info=True)
        return None


def get_content_item(server: TSC.Server, content_type: str, content_name: str, project_id: str) -> Optional[Union[TSC.WorkbookItem, TSC.DatasourceItem]]:
    try:
        name = content_name.strip().lower()
        items, _ = server.workbooks.get() if content_type == "workbook" else server.datasources.get()
        return next((i for i in items if i.project_id == project_id and i.name.strip().lower() == name), None)
    except Exception as e:
        logger.error(f"Error retrieving {content_type} '{content_name}': {e}", exc_info=True)
        return None


def move_content(content_type: str, content_name: str, source_project: str, new_project: str) -> Dict[str, object]:
    content_type = content_type.lower()
    if content_type not in ["workbook", "datasource"]:
        return {
            "success": False,
            "message": f"Invalid content type '{content_type}'. Must be 'workbook' or 'datasource'."
        }

    try:
        config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
        server, auth = get_tableau_server_and_auth(config)

        with server.auth.sign_in(auth):
            source_proj = find_project(server, source_project)
            if not source_proj:
                msg = f"Source project '{source_project}' not found."
                send_move_error_email(content_type, content_name, source_project, new_project, msg)
                return {"success": False, "message": msg}

            target_proj = find_project(server, new_project)
            if not target_proj:
                msg = f"Destination project '{new_project}' not found."
                send_move_error_email(content_type, content_name, source_project, new_project, msg)
                return {"success": False, "message": msg}

            content_item = get_content_item(server, content_type, content_name, source_proj.id)
            if not content_item:
                msg = f"{content_type.title()} '{content_name}' not found in project '{source_project}'."
                send_move_error_email(content_type, content_name, source_project, new_project, msg)
                return {"success": False, "message": msg}

            content_item.project_id = target_proj.id
            if content_type == "workbook":
                server.workbooks.update(content_item)
            else:
                server.datasources.update(content_item)

            logger.info(f"✅ Moved {content_type} '{content_name}' to project '{new_project}'")
            return {
                "success": True,
                "message": f"{content_type.title()} '{content_name}' successfully moved to project '{new_project}'.",
                "content_id": content_item.id,
                "project_id": target_proj.id
            }

    except Exception as e:
        logger.error(f"Unexpected error during move: {e}", exc_info=True)
        send_move_error_email(content_type, content_name, source_project, new_project, str(e))
        return {"success": False, "message": f"Unexpected error: {e}"}