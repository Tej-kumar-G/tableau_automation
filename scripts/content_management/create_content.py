import sys
import os
import logging
from pathlib import Path
from tableauserverclient import ProjectItem
import tableauserverclient as TSC

# Add the base_setup directory to the Python path
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, setup_logging, get_tableau_server_and_auth
from base_setup.utils.email_utils import send_email

# Setup logging
logger = setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))


def find_project(server: TSC.Server, project_name: str):
    all_projects, _ = server.projects.get()
    for project in all_projects:
        if project.name.strip().lower() == project_name.strip().lower():
            return project
    return None


def send_project_creation_error_email(project_name: str, context: str, error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    site_id = config.get("tableau", {}).get("site_id", "Unknown Site")

    subject = f"üö® Project Creation Failed - {project_name}"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>project-create</strong></p>

      <p><strong>Tableau Site:</strong> {site_id}</p>
      <p><strong>Project Name:</strong> {project_name}</p>
      <p><strong>Context:</strong><br><code>{context}</code></p>
      <p><strong>Error Message:</strong><br><code>{error_message}</code></p>

      <p class="footer"><i>This alert was auto-generated by the project creation script.</i></p>
    </body>
    </html>
    """

    try:
        send_email(subject, body, config)
    except Exception as email_err:
        logger.error(f"‚ùå Failed to send project creation error email: {email_err}")


def create_project(project_name: str, description: str = "") -> dict:
    config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
    server, auth = get_tableau_server_and_auth(config)

    try:
        with server.auth.sign_in(auth):
            logger.info(f"üîê Authenticated to Tableau site")

            if find_project(server, project_name):
                msg = f"‚ö†Ô∏è Project '{project_name}' already exists."
                logger.warning(msg)
                return {"success": False, "message": msg}

            new_project = ProjectItem(name=project_name, description=description)
            created = server.projects.create(new_project)

            msg = f"‚úÖ Project '{project_name}' created successfully. ID: {created.id}"
            logger.info(msg)
            return {
                "success": True,
                "message": msg,
                "project_id": created.id
            }

    except Exception as e:
        logger.error(f"‚ùå Failed to create project '{project_name}': {e}", exc_info=True)
        send_project_creation_error_email(project_name, context="Project creation attempt", error_message=str(e))
        return {
            "success": False,
            "message": f"Error creating project: {e}"
        }


# Example usage (if needed)
if __name__ == "__main__":
    project = create_project("My Auto Project", "This project was created by automation.")
    print(project)