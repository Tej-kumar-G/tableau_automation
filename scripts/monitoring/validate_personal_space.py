import os
import sys
from pathlib import Path

import requests

# Add base_setup directory to Python path
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, get_tableau_server_and_auth, setup_logging
from base_setup.utils.email_utils import send_email

# Setup logging
logger = setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))


def send_personalspace_error_email(site_id: str, context: str, error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"üö® Personal Space Validation Failed - {site_id}"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>tab-meta-personalspace-01</strong> ‚Äì Personal Space Validation</p>

      <p><strong>Tableau Site:</strong> {site_id}</p>
      <p><strong>Context:</strong><br><code>{context}</code></p>
      <p><strong>Error:</strong><br><code>{error_message}</code></p>
      <p><strong>Endpoint:</strong><br><code>/api/{{version}}/sites/{{site_id}}/projects</code></p>

      <p class="footer"><i>This alert was auto-generated by the personal space validation script.</i></p>
    </body>
    </html>
    """

    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Failed to send personal space error email: {email_error}")


def validate_personal_spaces():
    config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
    site_id = config.get("tableau", {}).get("site_id", "Unknown")

    try:
        server, auth = get_tableau_server_and_auth(config)
        with server.auth.sign_in(auth):
            logger.info("Connected to Tableau Cloud")

            auth_token = server.auth_token
            site_id = server.site_id
            server_url = config["tableau"]["server_url"]
            api_version = "3.26"  # Change if your instance is older/newer

            headers = {
                "X-Tableau-Auth": auth_token,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }

            try:
                url = f"{server_url}/api/{api_version}/sites/{site_id}/projects?pageSize=1000"
                logger.info(f"Calling: {url}")
                response = requests.get(url, headers=headers)
                response.raise_for_status()
                data = response.json()

                # Validate structure
                if "projects" not in data or "project" not in data["projects"]:
                    raise ValueError("Response JSON missing expected keys: 'projects.project'")

                all_projects = data["projects"]["project"]
                personal_spaces = [p for p in all_projects if p.get("personalSpace") is True]

                logger.info(f"Found {len(personal_spaces)} personal space(s).")

                results = [
                    {
                        "name": p["name"],
                        "id": p["id"],
                        "owner_id": p.get("owner", {}).get("id", "N/A")
                    }
                    for p in personal_spaces
                ]

                return {
                    "success": True,
                    "site_id": site_id,
                    "results": results
                }

            except Exception as e:
                context = f"GET /projects request failed or response malformed"
                logger.error(f"{context}: {e}")
                send_personalspace_error_email(site_id, context, str(e))
                return {
                    "success": False,
                    "site_id": site_id,
                    "results": []
                }

    except Exception as e:
        context = "Authentication or base setup failed"
        logger.error(f"{context}: {e}")
        send_personalspace_error_email(site_id, context, str(e))
        return {
            "success": False,
            "site_id": site_id,
            "results": []
        }


if __name__ == "__main__":
    result = validate_personal_spaces()

    print("\n=== Personal Spaces ===")
    if result["success"] and result["results"]:
        for ps in result["results"]:
            print(f"- {ps['name']} (ID: {ps['id']}, Owner: {ps['owner_id']})")
    elif result["success"]:
        print("‚úÖ No personal spaces found.")
    else:
        print("‚ùå Personal space validation failed. Check logs or email alert.")