import logging
import os
import sys
from pathlib import Path
from tableauserverclient import Pager

# Setup base path
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, setup_logging, get_tableau_server_and_auth
from base_setup.utils.email_utils import send_email

# Logging
setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))
logger = logging.getLogger('metadata_check')


def send_metadata_error_email(site_id: str, context: str, error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"üö® Metadata Description & Label Check Failed - {site_id}"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>tab-meta-desclabel-01</strong> ‚Äì Description & Label Check</p>

      <p><strong>Tableau Site:</strong> {site_id}</p>
      <p><strong>Action/Context:</strong><br><code>{context}</code></p>
      <p><strong>Error:</strong><br><code>{error_message}</code></p>
      <p><strong>Resources Checked:</strong><br>Workbooks and Datasources via REST API (Pager)</p>

      <p class="footer"><i>This alert was auto-generated by the metadata validation script.</i></p>
    </body>
    </html>
    """

    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Failed to send metadata error email: {email_error}")


def check_metadata_for_content():
    config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
    site_id = config.get("tableau", {}).get("site_id", "Unknown")

    try:
        server, auth = get_tableau_server_and_auth(config)

        with server.auth.sign_in(auth):
            logger.info("Signed into Tableau Cloud")

            # --- Workbooks ---
            logger.info("Fetching workbooks...")
            try:
                workbooks = list(Pager(server.workbooks))
            except Exception as e:
                context = "Fetching workbook metadata via Pager(server.workbooks)"
                logger.error(f"‚ùå {context} failed: {e}")
                send_metadata_error_email(site_id, context, str(e))
                return None

            workbook_results = []
            for wb in workbooks:
                workbook_results.append({
                    "type": "workbook",
                    "name": wb.name,
                    "project": wb.project_name,
                    "description": bool(wb.description and wb.description.strip()),
                    "has_data_labels": bool(getattr(wb, 'content_label_ids', []))
                })

            # --- Datasources ---
            logger.info("Fetching datasources...")
            try:
                datasources = list(Pager(server.datasources))
            except Exception as e:
                context = "Fetching datasource metadata via Pager(server.datasources)"
                logger.error(f"‚ùå {context} failed: {e}")
                send_metadata_error_email(site_id, context, str(e))
                return None

            datasource_results = []
            for ds in datasources:
                datasource_results.append({
                    "type": "datasource",
                    "name": ds.name,
                    "project": ds.project_name,
                    "description": bool(ds.description and ds.description.strip()),
                    "has_data_labels": bool(getattr(ds, 'content_label_ids', []))
                })

            all_results = workbook_results + datasource_results
            return {
                "success": True,
                "items": all_results
            }

    except Exception as e:
        context = "Authentication or metadata scan bootstrap"
        logger.error(f"‚ùå {context} failed: {e}")
        send_metadata_error_email(site_id, context, str(e))
        return None


if __name__ == "__main__":
    results = check_metadata_for_content()

    print("\n=== Description & Label Check ===")
    if not results or not results.get("items"):
        print("‚ùå No metadata retrieved or script failed. Check logs or email alert.")
        sys.exit(1)

    for item in results["items"]:
        print(f"{item['type'].capitalize():<10} | {item['name']:<30} | Project: {item['project']:<20} | "
              f"Desc: {'‚úÖ' if item['description'] else '‚ùå'} | Labels: {'‚úÖ' if item['has_data_labels'] else '‚ùå'}")