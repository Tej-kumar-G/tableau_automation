import logging
import os
import sys
from pathlib import Path
from tableauserverclient import Server, PersonalAccessTokenAuth

# Add base_setup directory to Python path
base_setup_path = str(Path(__file__).parent.parent.parent / "base_setup")
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, setup_logging, get_tableau_server_and_auth
from base_setup.utils.email_utils import send_email

# Setup logging
logger = setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))


def send_tcm_error_email(site_id: str, context: str, error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"üö® TCM Access Check Failed - {site_id}"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>tcm-access-check</strong></p>
      <p><strong>Tableau Site ID:</strong> {site_id}</p>
      <p><strong>Context:</strong><br><code>{context}</code></p>
      <p><strong>Error:</strong><br><code>{error_message}</code></p>
      <p class="footer"><i>This alert was auto-generated by the TCM feature validation script.</i></p>
    </body>
    </html>
    """
    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Failed to send TCM error email: {email_error}")


def check_tcm_access(site_override: str = None) -> dict:
    config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
    site_id = site_override or config["tableau"]["site_id"]

    try:
        if site_override:
            logger.info(f"Overriding site with '{site_override}'")
            tableau_cfg = config["tableau"]
            auth = PersonalAccessTokenAuth(
                token_name=tableau_cfg["token_name"],
                personal_access_token=tableau_cfg["personal_access_token"],
                site_id=site_override
            )
            server = Server(tableau_cfg["server_url"], use_server_version=True)
        else:
            server, auth = get_tableau_server_and_auth(config)

        with server.auth.sign_in(auth):
            logger.info(f"‚úÖ Signed in to Tableau Cloud site: {server.site_id}")

            try:
                current_user_id = server.user_id
                current_user = server.users.get_by_id(current_user_id)
                role = current_user.site_role
                username = current_user.name
            except Exception as e:
                context = "Fetching current user information after sign-in"
                logger.error(f"‚ùå {context} failed: {e}")
                send_tcm_error_email(site_id, context, str(e))
                return {
                    "success": False,
                    "site_id": site_id,
                    "user": "Unknown",
                    "role": "Unknown",
                    "has_tcm": "Unknown"
                }

            logger.info(f"üë§ User: {username} | Role: {role}")
            has_tcm = role in ["SiteAdministrator", "SiteAdministratorExplorer", "ServerAdministrator"]

            if has_tcm:
                logger.info("‚úÖ TCM-level access likely granted (admin privileges).")
            else:
                logger.warning("‚ö†Ô∏è TCM access unlikely. User is not an admin.")

            return {
                "success": True,
                "site_id": site_id,
                "user": username,
                "role": role,
                "has_tcm": has_tcm
            }

    except Exception as e:
        context = "Authenticating or connecting to Tableau server"
        logger.error(f"‚ùå {context} failed: {e}")
        send_tcm_error_email(site_id, context, str(e))
        return {
            "success": False,
            "site_id": site_id,
            "user": "Unknown",
            "role": "Unknown",
            "has_tcm": "Unknown"
        }


if __name__ == "__main__":
    result = check_tcm_access(site_override="nitidev")

    print("\n=== Tableau TCM Access Check ===")
    print(f"Site ID      : {result['site_id']}")
    print(f"User         : {result['user']}")
    print(f"Site Role    : {result['role']}")
    print(f"TCM Access   : {'‚úÖ Yes' if result['has_tcm'] is True else '‚ùå No' if result['has_tcm'] is False else 'Unknown'}")