import logging
import os
import sys
import zipfile
import xml.etree.ElementTree as ET
from pathlib import Path

# Add base_setup directory to Python path
base_setup_path = str(Path(__file__).parent.parent.parent / "base_setup")
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import (
    load_config,
    setup_logging,
    get_tableau_server_and_auth,
    ensure_directory_exists,
)
from base_setup.utils.email_utils import send_email
import tableauserverclient as TSC

# Setup logging
logger = setup_logging(os.path.join(base_setup_path, "config", "logging_config.yaml"))


def send_extension_scan_email(site_id: str, workbook_name: str, context: str, error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"üö® Extension Scan Failed - {workbook_name} ({site_id})"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>tab-ext-scan-01</strong> ‚Äì Extension Usage Scan</p>

      <p><strong>Site ID:</strong> {site_id}</p>
      <p><strong>Workbook:</strong> {workbook_name}</p>
      <p><strong>Context:</strong><br><code>{context}</code></p>
      <p><strong>Error:</strong><br><code>{error_message}</code></p>

      <p class="footer"><i>This alert was auto-generated by the extension scan script.</i></p>
    </body>
    </html>
    """
    try:
        send_email(subject, body, config)
    except Exception as e:
        logger.error(f"Email send failure: {e}")


def extract_twb_from_twbx(twbx_path: str, extract_to_dir: str) -> str:
    try:
        with zipfile.ZipFile(twbx_path, "r") as zip_ref:
            for file in zip_ref.namelist():
                if file.endswith(".twb"):
                    zip_ref.extract(file, extract_to_dir)
                    twb_path = os.path.join(extract_to_dir, file)
                    logger.info(f"Extracted .twb: {twb_path}")
                    return twb_path
        raise FileNotFoundError("No .twb file found in the .twbx archive.")
    except Exception as e:
        logger.error(f"Failed to extract .twb: {e}")
        raise


def scan_for_extensions(twb_path: str) -> dict:
    try:
        tree = ET.parse(twb_path)
        root = tree.getroot()

        tabpy_used = any("tabpy" in el.attrib.get("url", "").lower() for el in root.iter("script"))
        einstein_used = any("einstein" in el.attrib.get("url", "").lower() for el in root.iter("extension"))
        viz_ext_used = any("extension" in el.tag.lower() for el in root.iter())

        return {
            "tabpy": tabpy_used,
            "einstein": einstein_used,
            "viz_ext": viz_ext_used
        }

    except Exception as e:
        logger.error(f"Failed to parse {twb_path}: {e}", exc_info=True)
        raise


def check_extensions_in_workbook(workbook_name: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    download_dir = config.get("tableau", {}).get("download_path", "downloads")
    ensure_directory_exists(download_dir)

    try:
        server, auth = get_tableau_server_and_auth(config)
        with server.auth.sign_in(auth):
            logger.info("Signed into Tableau Server")
            site_id = server.site_id

            logger.info("Querying all workbooks on site")
            workbooks = list(TSC.Pager(server.workbooks))

            workbook = next((w for w in workbooks if w.name.strip().lower() == workbook_name.strip().lower()), None)
            if not workbook:
                msg = f"Workbook '{workbook_name}' not found"
                logger.error(msg)
                send_extension_scan_email(site_id, workbook_name, "Workbook Lookup", msg)
                return

            try:
                download_stub = os.path.join(download_dir, workbook.name.replace(' ', '_'))
                downloaded_path = server.workbooks.download(
                    workbook.id, filepath=download_stub, include_extract=False
                )
                logger.info(f"Downloaded workbook to {downloaded_path} (ID: {workbook.id})")
            except Exception as e:
                send_extension_scan_email(site_id, workbook.name, "Workbook Download", str(e))
                return

            try:
                twb_path = extract_twb_from_twbx(downloaded_path, download_dir)
            except Exception as e:
                send_extension_scan_email(site_id, workbook.name, "Extracting .twb", str(e))
                return

            try:
                ext_usage = scan_for_extensions(twb_path)
            except Exception as e:
                send_extension_scan_email(site_id, workbook.name, "Scanning Extensions", str(e))
                return

            print("\n=== Dashboard Extension Scan ===")
            print(f"Workbook         : {workbook.name}")
            print(f"Path             : {twb_path}")
            print(f"Uses TabPy       : {'‚úÖ' if ext_usage['tabpy'] else '‚ùå'}")
            print(f"Uses Einstein    : {'‚úÖ' if ext_usage['einstein'] else '‚ùå'}")
            print(f"Uses Viz Ext     : {'‚úÖ' if ext_usage['viz_ext'] else '‚ùå'}")

            return {
                "workbook": workbook.name,
                "path": twb_path,
                "tabpy_used": ext_usage["tabpy"],
                "einstein_used": ext_usage["einstein"],
                "viz_ext_used": ext_usage["viz_ext"]
            }

    except Exception as e:
        send_extension_scan_email("Unknown", workbook_name, "Top-Level Auth or Logic", str(e))
        logger.error(f"Top-level failure: {e}", exc_info=True)
        return None


if __name__ == "__main__":
    check_extensions_in_workbook("Superstore")