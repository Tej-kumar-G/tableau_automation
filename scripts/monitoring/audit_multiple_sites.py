import json
import os
import sys
from collections import Counter
from pathlib import Path

# Add base_setup directory to Python path
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, setup_logging, get_tableau_server_and_auth
from base_setup.utils.email_utils import send_email
from tableauserverclient import Pager, Server, PersonalAccessTokenAuth

# Setup logging
logger = setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))


def load_previous_snapshot(snapshot_file):
    if os.path.exists(snapshot_file):
        try:
            with open(snapshot_file, "r") as f:
                content = f.read().strip()
                return json.loads(content) if content else {}
        except Exception as e:
            logger.warning(f"Could not read snapshot file {snapshot_file}: {e}")
    return {}


def save_current_snapshot(snapshot_file, data):
    os.makedirs(os.path.dirname(snapshot_file), exist_ok=True)
    with open(snapshot_file, "w") as f:
        json.dump(data, f, indent=2)


def audit_site_user_group_roles(site_override: str = None) -> dict:
    config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
    email_cfg = config.get("email", {})

    if site_override:
        logger.info(f"Overriding site with '{site_override}'")
        tableau_cfg = config["tableau"]
        auth = PersonalAccessTokenAuth(
            token_name=tableau_cfg["token_name"],
            personal_access_token=tableau_cfg["personal_access_token"],
            site_id=site_override
        )
        server = Server(tableau_cfg["server_url"], use_server_version=True)
    else:
        server, auth = get_tableau_server_and_auth(config)

    with server.auth.sign_in(auth):
        logger.info("Connected to Tableau Cloud site")

        try:
            users = list(Pager(server.users))
            user_count = len(users)
            role_counter = Counter(user.site_role for user in users)
            logger.info(f"User count: {user_count}")
            logger.info(f"Role breakdown: {dict(role_counter)}")
        except Exception as e:
            logger.error(f"Failed to fetch users: {e}")
            user_count = -1
            role_counter = {}

        try:
            group_count = sum(1 for _ in Pager(server.groups))
            logger.info(f"Group count: {group_count}")
        except Exception as e:
            logger.error(f"Failed to fetch groups: {e}")
            group_count = -1

        site_id = site_override or config["tableau"]["site_id"]
        result = {
            "site": site_id,
            "user_count": user_count,
            "group_count": group_count,
            "role_breakdown": dict(role_counter)
        }

        # üîÅ Snapshot logic
        snapshot_dir = os.path.join(base_setup_path, "snapshots")
        snapshot_file = os.path.join(snapshot_dir, f"audit_snapshot_{site_id}.json")

        previous = load_previous_snapshot(snapshot_file)
        changes = []

        for key in ["user_count", "group_count"]:
            prev = previous.get(key)
            curr = result[key]
            if isinstance(prev, int) and isinstance(curr, int):
                if curr != prev:
                    delta = curr - prev
                    sign = "increased" if delta > 0 else "decreased"
                    message = f"{key.replace('_', ' ').capitalize()} {sign} from {prev} to {curr}"
                    logger.warning(f"‚ö†Ô∏è {message}")
                    changes.append(message)
                else:
                    logger.info(f"{key} unchanged ({curr})")
            elif prev is not None:
                logger.warning(f"‚ö†Ô∏è Could not compare {key}: Previous='{prev}', Current='{curr}'")

        # üîÅ Send email if there are any changes
        if changes:
            subject = f"{email_cfg.get('mail_sub', 'Tableau Audit Change')} - {site_id}"
            body = f"""
            <p>Detected changes in Tableau site <strong>{site_id}</strong>:</p>
            <ul>
                {''.join(f'<li>{msg}</li>' for msg in changes)}
            </ul>
            <p><i>This alert was auto-generated by the audit script.</i></p>
            """
            try:
                send_email(subject, body, config)
            except Exception as e:
                logger.error(f"Email send failed: {e}")

        save_current_snapshot(snapshot_file, {
            "user_count": user_count,
            "group_count": group_count
        })

        return result


if __name__ == '__main__':
    audit_site_user_group_roles("nitidev")
