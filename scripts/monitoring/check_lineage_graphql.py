import json
import os
import sys
from pathlib import Path
import requests

# Add base_setup directory to Python path
base_setup_path = str(Path(__file__).parent.parent.parent / "base_setup")
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, get_tableau_server_and_auth, setup_logging
from base_setup.utils.email_utils import send_email

# Setup logging
logger = setup_logging(os.path.join(base_setup_path, "config", "logging_config.yaml"))


def run_metadata_graphql(query: str, variables: dict = None, feature_label: str = "tab-loop-drop-12"):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    server, auth = get_tableau_server_and_auth(config)

    with server.auth.sign_in(auth):
        logger.info("Signed into Tableau Cloud")

        site_id = server.site_id
        token = server.auth_token
        server_url = config["tableau"]["server_url"]

        graphql_url = f"{server_url}/api/metadata/graphql"

        headers = {
            "X-Tableau-Auth": token,
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

        payload = {
            "query": query,
            "variables": variables or {}
        }

        try:
            logger.info("Sending GraphQL metadata query...")
            response = requests.post(graphql_url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"GraphQL request failed: {e}")
            send_graphql_error_email(
                graphql_url=graphql_url,
                query=query,
                variables=variables,
                error_message=str(e),
                feature_name=feature_label
            )
            return None


def send_graphql_error_email(graphql_url, query, variables, error_message, feature_name):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    site_id = config.get("tableau", {}).get("site_id", "Unknown Site")

    subject = f"üö® Lineage for Workbook Failed - {feature_name}"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>{feature_name}</strong> ‚Äì Lineage Check for Upstream/Downstream</p>

      <p><strong>Tableau Site:</strong> {site_id}</p>
      <p><strong>GraphQL Endpoint:</strong> <code>{graphql_url}</code></p>
      <p><strong>Variables Sent:</strong><br><code>{json.dumps(variables, indent=2)}</code></p>
      <p><strong>GraphQL Query:</strong><br><code>{query.strip()}</code></p>
      <p><strong>Error Encountered:</strong><br><code>{error_message}</code></p>

      <p class="footer"><i>This alert was auto-generated by the feature validation script.</i></p>
    </body>
    </html>
    """

    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Failed to send error email: {email_error}")


def get_lineage_for_workbook(workbook_name: str):
    feature_name = "tab-loop-drop-12"
    query = """
    query getWorkbookLineage($name: String!) {
      workbooks(filter: {name: $name}) {
        name
        id
        projectName
        upstreamDatasources {
          name
          id
        }
        embeddedDatasources {
          name
          id
        }
        sheets {
          name
          id
        }
        dashboards {
          name
          id
        }
      }
    }
    """
    variables = {"name": workbook_name}
    response = run_metadata_graphql(query, variables, feature_label=feature_name)

    if response is None:
        return None

    if "errors" in response:
        error_msg = json.dumps(response["errors"], indent=2)
        send_graphql_error_email(
            graphql_url="GraphQL error (logical)",
            query=query,
            variables=variables,
            error_message=error_msg,
            feature_name=feature_name
        )
        return None

    return {
        "success": True,
        "response": response
    }


if __name__ == "__main__":
    workbook_name = "Superstore"  # Replace with your workbook name
    result = get_lineage_for_workbook(workbook_name)

    print("\n=== Lineage for Workbook ===")
    if result is None:
        print("‚ùå GraphQL request failed or invalid. Check logs or email.")
        sys.exit(1)

    workbooks = result.get("response", {}).get("data", {}).get("workbooks", [])
    if not workbooks:
        msg = f"No lineage found for workbook '{workbook_name}'."
        logger.warning(msg)
        send_graphql_error_email(
            graphql_url="Query completed but returned empty result",
            query="getWorkbookLineage",
            variables={"name": workbook_name},
            error_message=msg,
            feature_name="tab-loop-drop-12"
        )
        print(msg)
        sys.exit(0)

    for wb in workbooks:
        print(f"\nüìò Workbook: {wb['name']} (ID: {wb['id']})")
        print(f"  üìÅ Project: {wb.get('projectName', 'N/A')}")

        if wb["upstreamDatasources"]:
            print("  üîº Upstream Datasources:")
            for ds in wb["upstreamDatasources"]:
                print(f"    - {ds['name']} (ID: {ds['id']})")
        else:
            print("  üîº No upstream datasources.")

        if wb["embeddedDatasources"]:
            print("  üß© Embedded Datasources:")
            for ds in wb["embeddedDatasources"]:
                print(f"    - {ds['name']} (ID: {ds['id']})")

        if wb["sheets"]:
            print("  üîΩ Downstream Sheets:")
            for sheet in wb["sheets"]:
                print(f"    üìÑ Sheet: {sheet['name']} (ID: {sheet['id']})")
        else:
            print("  üîΩ No downstream sheets.")