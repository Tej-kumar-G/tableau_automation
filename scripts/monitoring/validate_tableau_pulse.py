import os
import sys
from pathlib import Path
import requests

# Add base_setup directory to Python path
base_setup_path = str(Path(__file__).parent.parent.parent / "base_setup")
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import load_config, get_tableau_server_and_auth, setup_logging
from base_setup.utils.email_utils import send_email

# Setup logging
logger = setup_logging(os.path.join(base_setup_path, "config", "logging_config.yaml"))


def send_pulse_error_email(site_id: str, context: str, error_message: str, additional_info: str = ""):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"üö® Pulse Metric Creation Failed - {site_id}"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>tab-pulse-create-01</strong> ‚Äì Pulse Metric Creation</p>

      <p><strong>Site ID:</strong> {site_id}</p>
      <p><strong>Context:</strong><br><code>{context}</code></p>
      <p><strong>Error:</strong><br><code>{error_message}</code></p>
      {f"<p><strong>Details:</strong><br><code>{additional_info}</code></p>" if additional_info else ""}
      <p class="footer"><i>This alert was auto-generated by the Pulse metric automation script.</i></p>
    </body>
    </html>
    """
    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Email send failed: {email_error}")


def get_datastore_id(server, data_source_name, site_id):
    try:
        logger.info(f"üîç Looking up data source ID for '{data_source_name}'...")
        datasources, _ = server.datasources.get()
        for ds in datasources:
            if ds.name.strip().lower() == data_source_name.strip().lower():
                logger.info(f"‚úÖ Found Data Source: {ds.name} -> ID: {ds.id}")
                return ds.id
        logger.error(f"‚ùå Data source '{data_source_name}' not found!")
        send_pulse_error_email(site_id, "Datasource Lookup", f"Datasource '{data_source_name}' not found.")
    except Exception as e:
        send_pulse_error_email(site_id, "Datasource Lookup Failed", str(e))
    return None


def is_pulse_enabled(server_url, site_id, auth_token, api_version="3.26"):
    pulse_url = f"{server_url}/api/{api_version}/sites/{site_id}/pulse/metric-definitions"
    headers = {
        "X-Tableau-Auth": auth_token,
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    try:
        logger.info(f"üì° Checking if Pulse is enabled at: {pulse_url}")
        resp = requests.get(pulse_url, headers=headers)

        if resp.status_code == 404:
            logger.warning(f"üö´ Pulse API returned 404. Body: {resp.text}")
            return False

        if resp.status_code != 200:
            logger.error(f"‚ùå Unexpected status: {resp.status_code} | Body: {resp.text}")
            return False

        logger.info("‚úÖ Pulse is enabled.")
        return True

    except Exception as e:
        logger.error(f"üî• Pulse check failed: {e}")
        return False


def create_pulse_metric(datastore_name: str | None = None):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    server, auth = get_tableau_server_and_auth(config)
    datastore_name = datastore_name or config["test_data"]["datastore_name"]
    metric_name = f"AutoMetric_{datastore_name}"
    metric_expression = "COUNTD([Order ID])"

    with server.auth.sign_in(auth):
        logger.info("üîê Authenticated to Tableau Cloud")
        auth_token = server.auth_token
        site_id = server.site_id
        server_url = config["tableau"]["server_url"]

        # 1. Check if Pulse is enabled
        if not is_pulse_enabled(server_url, site_id, auth_token):
            send_pulse_error_email(
                site_id,
                "Pulse API Check",
                "Pulse is not enabled (404 or disabled)",
                f"Endpoint: /api/3.26/sites/{site_id}/pulse/metric-definitions"
            )
            return {
                "success": False,
                "message": "Pulse is not enabled on this site."
            }

        # 2. Lookup data source ID
        datastore_id = get_datastore_id(server, datastore_name, site_id)
        if not datastore_id:
            return {"success": False, "message": "Datasource not found"}

        # 3. Compose GraphQL mutation
        graphql_url = f"{server_url}/api/metadata/graphql"
        headers = {
            "X-Tableau-Auth": auth_token,
            "Content-Type": "application/json"
        }

        graphql_query = f"""
        mutation CreatePulseMetric {{
          pulseCreateMetric(input: {{
            name: "{metric_name}",
            description: "Automated metric from script",
            dataSourceId: "{datastore_id}",
            expression: "{metric_expression}"
          }}) {{
            metric {{
              id
              name
            }}
          }}
        }}
        """

        payload = {"query": graphql_query}

        # 4. Execute GraphQL mutation
        try:
            logger.info(f"üì§ Creating Pulse metric '{metric_name}' via GraphQL...")
            response = requests.post(graphql_url, headers=headers, json=payload)

            if response.status_code != 200 or "errors" in response.json():
                error_body = response.text
                logger.error(f"‚ùå GraphQL error: {response.status_code} | {error_body}")
                send_pulse_error_email(
                    site_id,
                    "GraphQL Metric Creation",
                    f"Status: {response.status_code}",
                    error_body
                )
                return {"success": False, "message": "GraphQL mutation failed"}

            logger.info("‚úÖ Pulse metric created successfully.")
            return {"success": True, "message": "Metric created successfully"}

        except Exception as e:
            send_pulse_error_email(site_id, "GraphQL Mutation Exception", str(e))
            return {"success": False, "message": "Exception during metric creation"}


if __name__ == "__main__":
    result = create_pulse_metric()
    if result["success"]:
        print("‚úÖ Pulse metric created successfully.")
    else:
        print(f"‚ùå Failed to create Pulse metric: {result['message']}")