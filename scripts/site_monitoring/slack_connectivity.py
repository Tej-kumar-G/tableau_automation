import os
import sys
import logging
import requests
from pathlib import Path

# Add the base_setup directory to the Python path
base_setup_path = str(Path(__file__).parent.parent.parent / 'base_setup')
sys.path.append(base_setup_path)

from base_setup.utils.common_utils import (
    load_config,
    get_tableau_server_and_auth,
    setup_logging
)
from base_setup.utils.email_utils import send_email

# Setup logging
setup_logging(os.path.join(base_setup_path, 'config', 'logging_config.yaml'))
logger = logging.getLogger('tableau_automation')


def send_webhook_failure_email(site_id: str, slack_url: str, context: str, error_message: str):
    config = load_config(os.path.join(base_setup_path, "config", "config.yaml"))
    subject = f"ðŸš¨ Slack Webhook Integration Failed - {site_id}"

    body = f"""
    <html>
    <head>
      <style>
        body {{ font-family: Arial, sans-serif; }}
        .header {{ font-size: 16px; font-weight: bold; color: #c00; }}
        .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
        code {{ background-color: #f5f5f5; padding: 8px; display: block; white-space: pre-wrap; border: 1px solid #ccc; }}
      </style>
    </head>
    <body>
      <p class="header">Feature: <strong>tab-slack-webhook-01</strong> â€“ Slack Webhook Integration</p>

      <p><strong>Site ID:</strong> {site_id}</p>
      <p><strong>Slack Webhook URL:</strong><br><code>{slack_url}</code></p>
      <p><strong>Context:</strong><br><code>{context}</code></p>
      <p><strong>Error:</strong><br><code>{error_message}</code></p>

      <p class="footer"><i>This alert was auto-generated by the webhook integration script.</i></p>
    </body>
    </html>
    """

    try:
        send_email(subject, body, config)
    except Exception as email_error:
        logger.error(f"Failed to send email alert: {email_error}")


def slack_integration_with_webhook():
    config = load_config(os.path.join(base_setup_path, 'config', 'config.yaml'))
    tableau_cfg = config["tableau"]
    slack_url = config["slack"].get("webhook_url")

    if not slack_url:
        logger.error("Slack webhook URL missing in config.")
        send_webhook_failure_email("Unknown", "Missing", "Config Validation", "Slack webhook URL is not defined in config.")
        return

    try:
        server, auth = get_tableau_server_and_auth(config)
        with server.auth.sign_in(auth):
            auth_token = server.auth_token
            site_id = server.site_id
            api_version = "3.10"  # Adjust as needed

            webhook_endpoint = f"{tableau_cfg['server_url']}/api/{api_version}/sites/{site_id}/webhooks"

            payload = {
                "webhook": {
                    "name": "Slack Integration Test",
                    "event": "WorkbookCreated",
                    "webhook-destination": {
                        "webhook-destination-http": {
                            "method": "POST",
                            "url": slack_url
                        }
                    }
                }
            }

            headers = {
                "X-Tableau-Auth": auth_token,
                "Content-Type": "application/json"
            }

            logger.info(f"Sending webhook creation request to {webhook_endpoint}")
            response = requests.post(webhook_endpoint, headers=headers, json=payload)

            if response.status_code == 201:
                logger.info("âœ… Slack webhook integration successful.")
                return {
                    "success": True,
                    "message": "Slack webhook integration successful."
                }
            else:
                error_msg = f"Unexpected response: {response.status_code} | {response.text}"
                logger.error(error_msg)
                send_webhook_failure_email(site_id, slack_url, "Webhook creation response", error_msg)

    except requests.HTTPError as http_err:
        logger.error(f"HTTP error occurred: {http_err}", exc_info=True)
        send_webhook_failure_email(site_id, slack_url, "HTTPError Exception", str(http_err))
    except Exception as e:
        logger.error(f"Unexpected error: {e}", exc_info=True)
        send_webhook_failure_email("Unknown", slack_url, "General Exception", str(e))


if __name__ == "__main__":
    slack_integration_with_webhook()